package baekjoon;

/*
	[동물원]
	
	문제: 어떤 동물원에 가로로 두칸 세로로 N칸인 아래와 같은 우리가 있다.
		이 동물원에는 사자들이 살고 있는데 사자들을 우리에 가둘 때, 가로로도 세로로도 붙어 있게 배치할 수는 없다.
		이 동물원 조련사는 사자들의 배치 문제 때문에 골머리를 앓고 있다.
		동물원 조련사의 머리가 아프지 않도록 우리가 2*N 배열에 사자를 배치하는 경우의 수가 몇 가지인지를 알아내는 프로그램을 작성해 주도록 하자.
		사자를 한 마리도 배치하지 않는 경우도 하나의 경우의 수로 친다고 가정한다.

	입력: 첫째 줄에 우리의 크기 N(1≤N≤100,000)이 주어진다.

	출력: 첫째 줄에 사자를 배치하는 경우의 수를 9901로 나눈 나머지를 출력하여라.
*/

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class Zoo {
	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	int n;
	long dp[][];
	
	Zoo(){
		try {
			n = Integer.parseInt(br.readLine());
			dp = new long[100001][3]; 
		}catch(IOException ie) {}
	}
	void loop() {
		dp[1][0] = 1;
		dp[1][1] = 1;
		dp[1][2] = 1;
		
		for(int i=2; i<=n; i++) {
//			System.out.println("(1) "+dp[i-1][0]+", "+ dp[i-1][1] +", "+dp[i-1][2]);
			dp[i][0] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][2]) % 9901;
			dp[i][1] = (dp[i-1][2] + dp[i-1][0]) % 9901;
			dp[i][2] = (dp[i-1][1] + dp[i-1][0]) % 9901;
//			System.out.println("(2) "+dp[i][0]+", "+ dp[i][1] +", "+dp[i][2]);
		}
	}
	void play() {
		loop();
		System.out.println((dp[n][0] + dp[n][1] + dp[n][2])%9901);
		
	}
}
class Main{
   public static void main(String[] args) {
      new Zoo().play();
   }
}

/*
		한 줄 정리
	이항계수 문제인 줄 알았는데, 이항계수 문제가 아니다.
	어떻게 풀어야하는지 몰라서 코드를 봤다. 요즘 코드를 계속 보게된다. 도저히 못 풀겠다. :( 
	
	만약 4를 입력하면 밑의 값을 dp에 저장하면서 결과를 찾는다.
				  a0 a1 a2
		dp[0][a]   0  0  0
		dp[1][a]   1  1  1
		dp[2][a]   3  2  2
		dp[3][a]   7  5  5
		dp[4][a]  17 12 12
		
	여기서 밑의 값 3개를 더하면 결과가 나온다. 
	여기서 a0과 a1과 a2를 살펴보자.
	문제에 2*N 배열이라고 주었으니까, 좌측 우측 미배치로 한정지을 수 있다.
	a0은 현재 행에 사자가 모두 없다면 전 행에는 왼쪽/오른쪽/미배치 가능한 것을 의미.  
	a1은 현재 줄 왼쪽에 사자가 있다면 전 행에는 오른쪽/미배치 가능한 것을 의미. 
	a2는 현재 줄 오른쪽에 사자가 있다면 전 행에는 왼쪽/미배치 가능한 것을 의미. 
	
	그래서 loop()에서 더할 때도 처음은 1 1 1로 초기화한 후, (한 마리도 배치하지 않는 경우도 경우의 수로 치니까 1로 초기화) 
	a0은 전 행의 값 모두를 더하고
	a1은 왼쪽 행을 제외한 두 행의 값을 더하고
	a2는 오른쪽 행을 제외한 두 행의 값을 더한다. 
	
	그러니까, 만약 4일 떄. 
	 
		    |			여기 맨 윗 행에 왼쪽/오른쪽/미배치니까 3
		____|____
		    |  			여기 2번째 행에 위에서 미배치했으면 왼쪽/오른쪽/미배치 할 수 있고,
		____|____  		위에서 왼쪽에 놨으면 오른쪽/미배치, 위에서 오른쪽에 놨으면 왼쪽/미배치 
		    |		
		____|____		위와 같은 방식으로 쭉쭉 내려온다. 
		    |
 	 	____|____
 	 	
	http://mygumi.tistory.com/128 마이구미님 블로그를 참고하여 정리했다. 또한 이해했다. 
 */
