/*
	[계단 오르기]
	
	문제: 계단 오르기 게임은 계단 아래 시작점부터 계단 꼭대기에 위치한 도착점까지 가는 게임이다.
		<그림 1>과 같이 각각의 계단에는 일정한 점수가 쓰여 있는데 계단을 밟으면 그 계단에 쓰여 있는 점수를 얻게 된다.
		                   __
		                __|20|
		             __|10|  |
		          __|25|  |  |
		       __|15|  |  |  |
		    __|20|  |  |  |  |
		___|10|  |  |  |  |  |
		시작
		    - 그림1 - 

		예를 들어 <그림 1>을 보면 시작점에서부터 첫 번째, 두 번째, 네 번째, 여섯 번째, 계단을 밟아 도착점에 도달하면 
		총 점수는 10 + 20 + 25 + 20 = 75점이 된다.
		1. 계단은 한 번에 한 계단씩 또는 두 계단씩 오를 수 있다. 즉, 한 계단을 밟으면서 이어서 다음 계단이나, 다음 다음 계단으로 오를 수 있다.
		2. 연속된 세 개의 계단을 모두 밟아서는 안 된다. 단, 시작점은 계단에 포함되지 않는다.
		3. 마지막 도착 계단은 반드시 밟아야 한다.
		따라서 첫 번째 계단을 밟고 이어 두 번째 계단이나, 세 번째 계단으로 오를 수 있다.
		하지만, 첫 번째 계단을 밟고 이어 네 번째 계단으로 올라가거나, 첫 번째, 두 번째, 세번째 계단을 연속해서 모두 밟을 수는 없다.
		각 계단에 쓰여 있는 점수가 주어질 때 이 게임에서 얻을 수 있는 총 점수의 최대값을 구하는 프로그램을 작성하시오.
		
	입력: 입력의 첫째 줄에 계단의 개수가 주어진다.
		둘째 줄부터 한 줄에 하나씩 제일 아래에 놓인 계단부터 순서대로 각 계단에 쓰여 있는 점수가 주어진다.
		계단의 개수는 300이하의 자연수이고, 계단에 쓰여 있는 점수는 10,000이하의 자연수이다.

	출력: 첫째 줄에 계단 오르기 게임에서 얻을 수 있는 총 점수의 최대값을 출력한다.
*/

import java.io.*;

class Stair {
	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	int n;
	int[] score;
	int[][] memo;
	
	Stair(){
		try {
			n = Integer.parseInt(br.readLine());
			score = new int[n];
			memo = new int[n][2]; // 1~2계단씩 오를 수 있으니까.
			for(int i=0; i<n; i++) {
				score[i] = Integer.parseInt(br.readLine());
			}
		}catch(IOException ie) {}
	}
	void showResult() {
		int result = Math.max(memo[n-1][0], memo[n-1][1]);
		System.out.println(result);
	}
	void play() {
		memo[0][0] = score[0];
		for(int i=1; i<n; i++) {
			if(i==1) memo[i][0] = score[i];
			else memo[i][0] = Math.max(memo[i-2][0], memo[i-2][1])+score[i];
			memo[i][1] = memo[i-1][0]+score[i];
		}
		showResult();
	}
}

class Main{
   public static void main(String[] args) {
      new Stair().play();
   }
}

/*
		한 줄 정리
	이것도 포도주시식처럼 전의 수를 검사하고 최대값을 가져오고 하는 것인데,
	계단오르기는 1칸 혹은 2칸만 오를 수 있기 때문에, 
	자신의 전 값과 전전값만 확인하면 된다. 

	      1칸   2칸
	 100  100     0  // 사실 여기는 어디에 100을 넣어도 상관없다. 둘 다 100을 줘도 된다.
	 200  200   300
	   1  101   201
	   2  302   103
	 300  501   602
	 100  402   601

	 1을 보자. 1의 1칸은 전전 행의 최대값 + 자기자신이다. 1의 2칸은 전의 행의 1칸 값이다. 
	 그래서 100일 떄는 이전의 값이 0이니까 100을 주는 것이고,
	 200에서도 전전의 최대값은 0이니까, 자기 자신을 더해서 1칸은 200이고, 2칸은 전 행의 1칸이니까 300이다.
	 이렇게 반복하다 보면 마지막 행의 최대값으로 원하는 값을 구할 수 있다. 
 */